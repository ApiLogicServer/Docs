from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, Numeric, Date, func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker
from logic_bank import logic_bank

Base = declarative_base()

class Customer(Base):
    __tablename__ = 'customers'
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=True)
    balance = Column(Numeric(precision=10, scale=2), nullable=True)
    credit_limit = Column(Numeric(precision=10, scale=2), nullable=True)

    orders = relationship("Order", back_populates="customer")

class Order(Base):
    __tablename__ = 'orders'
    id = Column(Integer, primary_key=True, autoincrement=True)
    customer_id = Column(Integer, ForeignKey('customers.id'), nullable=True)
    notes = Column(String, nullable=True)

    customer = relationship("Customer", back_populates="orders")
    items = relationship("Item", back_populates="order")

    @property
    def amount_total(self):
        return sum(item.amount for item in self.items)

class Item(Base):
    __tablename__ = 'items'
    id = Column(Integer, primary_key=True, autoincrement=True)
    order_id = Column(Integer, ForeignKey('orders.id'), nullable=True)
    product_id = Column(Integer, ForeignKey('products.id'), nullable=True)
    quantity = Column(Integer, nullable=True)
    amount = Column(Numeric(precision=10, scale=2), nullable=True)
    unit_price = Column(Numeric(precision=10, scale=2), nullable=True)

    order = relationship("Order", back_populates="items")
    product = relationship("Product")

class Product(Base):
    __tablename__ = 'products'
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=True)
    unit_price = Column(Numeric(precision=10, scale=2), nullable=True)

# Create SQLite database
engine = create_engine('sqlite:///system/genai/temp/model.sqlite', echo=True)
Base.metadata.create_all(engine)

# Create a session
Session = sessionmaker(bind=engine)
session = Session()

# Inserting sample data for customers and products
customer1 = Customer(name='John Doe', balance=1000.00, credit_limit=1500.00)
customer2 = Customer(name='Jane Smith', balance=2000.00, credit_limit=3000.00)

product1 = Product(name='Product A', unit_price=10.00)
product2 = Product(name='Product B', unit_price=20.00)

session.add_all([customer1, customer2, product1, product2])
session.commit()

session.close()

# Enforce business rules using Logic Bank
logic_bank.activate(session=session)

# Ed. 
#   - LogicBank operation requires rule declaration.